{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation: Create a multi-az, load balanced and auto scaled web server suitable for codedeploy targets.",
  "Outputs" : {
    "ElasticLoadBalancer" : {
      "Description": "The DNSName of the loadbalancer",  
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}
    },
    "ASGroup" : {
      "Description": "The name of the AS Group",  
      "Value" : { "Ref": "WebServerGroup" }
    },
    "CodeDeployARN": {
      "Description": "The service role for use with CodeDeploy",
      "Value" : {"Fn::GetAtt" : ["CodeDeployRole", "Arn"] }
    }
  },  
  "Resources" : {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": "andrew@utterlyforked.co.uk" , "Protocol": "email" } ]
      }
    },
    "AppServerPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:DescribeTags"
              ],
              "Effect": "Allow",
              "Sid": "AllowEC2Tags"
            },
            {
              "Resource": [
        	"arn:aws:s3:::uf-shared-files/*",
        	"arn:aws:s3:::aws-codedeploy-us-east-1/*",
        	"arn:aws:s3:::aws-codedeploy-us-west-2/*",        
        	"arn:aws:s3:::aws-codedeploy-eu-west-1/*",
        	"arn:aws:s3:::aws-codedeploy-ap-southeast-2/*"
              ],
              "Action": [
        	"s3:Get*",
        	"s3:List*"
              ],
              "Effect": "Allow",
              "Sid": "AllowS3ReadAccess"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AppServerPolicy",
        "Roles": [
          {
            "Ref": "AppServerRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "AppServerRole": {
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ]
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "CodeDeployRole": {
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
           "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com", 
                  "codedeploy.us-west-2.amazonaws.com",
                  "codedeploy.eu-west-1.amazonaws.com",
                  "codedeploy.ap-southeast-2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ]
        }
      },
      "Type": "AWS::IAM::Role"
    },
"AppServerProfile" : {
    "Type" : "AWS::IAM::InstanceProfile",
    "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "AppServerRole" } ]
    }
},

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : { 
        "AvailabilityZones" : [ "eu-west-1a", "eu-west-1b", "eu-west-1c" ],
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Value": "appserver",
            "Key": "role"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": "application",
            "Key": "example"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": "production",
            "Key": "environment"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": "uf-shared-files/codedeploy/setup",
            "Key": "sourcebucket"
          }
        ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "6",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  "autoscaling:EC2_INSTANCE_TERMINATE",
                                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

   "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "KeyName": "uforked",
        "InstanceType": "m3.medium",
        "ImageId": "ami-d6d18ea1",
	"IamInstanceProfile": 
	  {
	    "Ref": "AppServerProfile"
          }
	,
        "UserData": "IyEvYmluL2Jhc2gKCiNjb2RlZGVwbG95IHNoZW5uYW5pZ2FucwoKeXVtIC15IHVwZGF0ZQp5dW0gaW5zdGFsbCAteSBydWJ5Cnl1bSBpbnN0YWxsIC15IGF3cy1jbGkKY2QgL2hvbWUvZWMyLXVzZXIKYXdzIHMzIGNwIHMzOi8vYXdzLWNvZGVkZXBsb3ktZXUtd2VzdC0xL2xhdGVzdC9pbnN0YWxsIC4gLS1yZWdpb24gZXUtd2VzdC0xCmNobW9kICt4IC4vaW5zdGFsbAouL2luc3RhbGwgYXV0bwoKI2p1c3QgZW5vdWdoIGJhc2ggdG8gcGVyZm9ybQoKeXVtIGluc3RhbGwgLXkgaHR0cGQKCnNlcnZpY2UgaHR0cGQgc3RhcnQK"
        }
      },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "2"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : [ "eu-west-1a", "eu-west-1b", "eu-west-1c" ],
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "TCP:80",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "15",
          "Timeout" : "5"
        }
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access from the office and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
        } ]
      }
    }
  }
}
